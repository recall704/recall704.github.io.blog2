<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clouds on RECALL&#39;s Blog</title>
    <link>http://www.recall704.com/cloud/</link>
    <description>Recent content in Clouds on RECALL&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 07 Jan 2018 20:32:40 +0800</lastBuildDate>
    
	<atom:link href="http://www.recall704.com/cloud/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploy K8s With Kubeadm</title>
      <link>http://www.recall704.com/cloud/deploy-k8s-with-kubeadm/</link>
      <pubDate>Sun, 07 Jan 2018 20:32:40 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/deploy-k8s-with-kubeadm/</guid>
      <description>一、环境准备 两台 centos 7.2 mini 系统，virtualbox 安装的系统，桥接模式，能正常访问网络
node1： 192.168.88.50
node2： 192.168.88.51
二、环境预处理在两台机器上都执行下面的命令 1. 关闭防火墙 systemctl stop firewalld  2. sysctl 配置 cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sysctl --system  3. 时间同步 yum install -y ntpdate ntpdate cn.ntp.org.cn  4. 启动 epel yum install -y epel-release  5. 禁用虚拟内存 swapoff -a  6. 设置 hostname hostnamectl set-hostname node1  三、安装 docker yum install -y docker systemctl enable docker &amp;amp;&amp;amp; systemctl start docker  四、安装 kubeadm, kubelet and kubectl cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.</description>
    </item>
    
    <item>
      <title>Clair 源码简要分析</title>
      <link>http://www.recall704.com/cloud/clair/</link>
      <pubDate>Wed, 20 Dec 2017 20:24:42 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/clair/</guid>
      <description>概述 clair 是 coreos 发布的一款开源容器漏洞扫描工具，该工具可以交叉检查Docker镜像的操作系统以及上面安装的任何包是否与任何已知不安全的包版本相匹配。
在开始分析 clair 之前，我们明白几点：
1. clair 是以静态分析的方式对镜像进行分析的，有点类似于杀毒软件用特征码来扫描病毒。 2. clair 镜像分析是按镜像层级来进行的，如果某一层的软件有漏洞，在上层被删除了，该漏洞还是存在的。 3. clair 的漏洞扫描是通过软件版本比对来完成的，如果某个应用，比如 nginx ，它在镜像中的版本为 1.0.0，而该版本在数据库中存在 1.0.0 对应的漏洞数据，则表示该镜像存在对应的漏洞。
clair 中的几个概念 1. Namespace 这里的 namespace 既不是租户也不是命名空间，而是系统或软件的名称。
比如 debian，NodeJS。
2. Feature 在镜像层中检测到的软件包，但是没有检测到 namespace。
比如： Name: OpenSSL, Version: 1.0, VersionFormat: dpkg
3. NamespacedFeature 和 Feature 类似，同时检测到了 namespace。
比如： OpenSSL 1.0 dpkg Debian:7
4. Vulnerability Vulnerability 是应用对应的漏洞描述。
代码分析 我们直接从镜像扫描开始分析代码
代码在 github.com/coreos/clair/worker.go 中
func processLayers(datastore database.Datastore, imageFormat string, requests []LayerRequest) ([]database.</description>
    </item>
    
    <item>
      <title>harbor 源码分析： job</title>
      <link>http://www.recall704.com/cloud/harbor-job.md/</link>
      <pubDate>Tue, 19 Dec 2017 18:45:17 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/harbor-job.md/</guid>
      <description>概述 harbor 中有两个常用的功能，镜像复制和镜像扫描，而这两个操作都是比较耗时的任务，在 harbor 中，被设计为 job 来完成。
接口定义 同样的，我们先来看 Job 的接口定义
代码在 github.com/vmware/harbor/src/jobservice/job/jobs.go
type Job interface { // job 的 id，通过 id 可以查看对应的信息 ID() int64 // job 类型，目前只有 Scan 和 Replication 两种 Type() Type // 日志所在路径，通过这个路径可以查看 job 的状态 LogPath() string // 更新 job 状态 UpdateStatus(status string) error // 初始化一个 job Init() error }  镜像扫描 1. 镜像扫描任务的基本结构 代码在 github.com/vmware/harbor/src/jobservice/job/jobs.go
type ScanJob struct { id int64 parm *ScanJobParm } type ScanJobParm struct { Repository string Tag string // 镜像 哈希值 Digest string }  镜像扫描需要的参数很少，其实就是镜像的地址，附带一个镜像哈希值。</description>
    </item>
    
    <item>
      <title>harbor 源码分析： 用户认证</title>
      <link>http://www.recall704.com/cloud/harbor-authenticate.md/</link>
      <pubDate>Wed, 22 Nov 2017 11:14:50 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/harbor-authenticate.md/</guid>
      <description>接口定义 代码在 src/ui/auth/authenticator.go
// Authenticator provides interface to authenticate user credentials. type Authenticator interface { // Authenticate ... Authenticate(m models.AuthModel) (*models.User, error) }  接口中定义了函数 Authenticate，只要对应的结构体实现了该函数，就能完成认证。
我们通过其中的数据库认证方式，来简单分析。
接口实现 代码在 src/ui/auth/db/db.go
// Auth implements Authenticator interface to authenticate user against DB. type Auth struct{} // Authenticate calls dao to authenticate user. func (d *Auth) Authenticate(m models.AuthModel) (*models.User, error) { u, err := dao.LoginByDb(m) if err != nil { return nil, err } return u, nil }  接口的注册 代码在 src/ui/auth/db/db.</description>
    </item>
    
    <item>
      <title>部署一个带有基础认证的 docker 镜像仓库</title>
      <link>http://www.recall704.com/cloud/deploy-docker-registry-with-basic-authentication/</link>
      <pubDate>Sat, 28 Oct 2017 20:46:54 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/deploy-docker-registry-with-basic-authentication/</guid>
      <description>一、创建 auth 目录 创建 auth 目录来存放 用户名和密码
$ mkdir auth  二、生成认证文件 $ docker run \ --entrypoint htpasswd \ registry:2 -Bbn testuser testpassword &amp;gt; auth/htpasswd  生成了一个用户名为 testuser，密码为 testpassword 的认证文件
三、启动镜像仓库 docker run -d \ -p 5000:5000 \ --restart=always \ --name registry \ -v `pwd`/auth:/auth \ -e &amp;quot;REGISTRY_AUTH=htpasswd&amp;quot; \ -e &amp;quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;quot; \ -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \ registry:2  将认证文件挂载到容器中即可。
如果有证书
$ docker run -d \ -p 5000:5000 \ --restart=always \ --name registry \ -v `pwd`/auth:/auth \ -e &amp;quot;REGISTRY_AUTH=htpasswd&amp;quot; \ -e &amp;quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;quot; \ -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \ -v `pwd`/certs:/certs \ -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.</description>
    </item>
    
  </channel>
</rss>