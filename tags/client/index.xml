<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Client on RECALL&#39;s Blog</title>
    <link>http://www.recall704.com/tags/client/</link>
    <description>Recent content in Client on RECALL&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 11 Apr 2018 14:22:03 +0800</lastBuildDate>
    
	<atom:link href="http://www.recall704.com/tags/client/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>创建 client （一）： token 方式访问 k8s API</title>
      <link>http://www.recall704.com/cloud/k8s-authentication-with-token/</link>
      <pubDate>Wed, 11 Apr 2018 14:22:03 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/k8s-authentication-with-token/</guid>
      <description>0x1 概述 k8s 提供了三种认证方式访问 API Server，分别是：
1. ca 认证 k8s 的各个组件，比如 kubelet, kube-proxy 和 API Server 进行通信的时候，一般都是使用证书的形式，配置在 kubeconfig 文件中。
2. token 认证 rook （https://github.com/rook/rook） 、dashboard （https://github.com/kubernetes/dashboard） 这些应用，跑在 k8s 集群内，而且需要访问 k8s 的资源， 运行的时候需要指定 ServiceAccount ，ServiceAccount 又配置了指定的角色和权限。
3. http basic 认证 使用用户名和密码访问 k8s，稍后会有新的文章详细介绍。
0x2 token 认证详解 像 rook、dashboard 这样的应用，它是怎样通过 ServiceAccount 和 k8s API Server 进行通信的呢？ 和 k8s API Server 通信需要创建 client， 而创建 client 需要对应的 配置信息（包含了 API Server 的地址和端口，以及认证信息） 我们在 rook 的代码中，可以看到下面这样类似的代码</description>
    </item>
    
  </channel>
</rss>