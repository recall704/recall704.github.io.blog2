<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on RECALL&#39;s Blog</title>
    <link>http://www.recall704.com/tags/docker/</link>
    <description>Recent content in Docker on RECALL&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 19 Dec 2017 18:45:17 +0800</lastBuildDate>
    
	<atom:link href="http://www.recall704.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>harbor 源码分析： job</title>
      <link>http://www.recall704.com/cloud/harbor-job.md/</link>
      <pubDate>Tue, 19 Dec 2017 18:45:17 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/harbor-job.md/</guid>
      <description>概述 harbor 中有两个常用的功能，镜像复制和镜像扫描，而这两个操作都是比较耗时的任务，在 harbor 中，被设计为 job 来完成。
接口定义 同样的，我们先来看 Job 的接口定义
代码在 github.com/vmware/harbor/src/jobservice/job/jobs.go
type Job interface { // job 的 id，通过 id 可以查看对应的信息 ID() int64 // job 类型，目前只有 Scan 和 Replication 两种 Type() Type // 日志所在路径，通过这个路径可以查看 job 的状态 LogPath() string // 更新 job 状态 UpdateStatus(status string) error // 初始化一个 job Init() error }  镜像扫描 1. 镜像扫描任务的基本结构 代码在 github.com/vmware/harbor/src/jobservice/job/jobs.go
type ScanJob struct { id int64 parm *ScanJobParm } type ScanJobParm struct { Repository string Tag string // 镜像 哈希值 Digest string }  镜像扫描需要的参数很少，其实就是镜像的地址，附带一个镜像哈希值。</description>
    </item>
    
    <item>
      <title>harbor 源码分析： 用户认证</title>
      <link>http://www.recall704.com/cloud/harbor-authenticate.md/</link>
      <pubDate>Wed, 22 Nov 2017 11:14:50 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/harbor-authenticate.md/</guid>
      <description>接口定义 代码在 src/ui/auth/authenticator.go
// Authenticator provides interface to authenticate user credentials. type Authenticator interface { // Authenticate ... Authenticate(m models.AuthModel) (*models.User, error) }  接口中定义了函数 Authenticate，只要对应的结构体实现了该函数，就能完成认证。
我们通过其中的数据库认证方式，来简单分析。
接口实现 代码在 src/ui/auth/db/db.go
// Auth implements Authenticator interface to authenticate user against DB. type Auth struct{} // Authenticate calls dao to authenticate user. func (d *Auth) Authenticate(m models.AuthModel) (*models.User, error) { u, err := dao.LoginByDb(m) if err != nil { return nil, err } return u, nil }  接口的注册 代码在 src/ui/auth/db/db.</description>
    </item>
    
    <item>
      <title>部署一个带有基础认证的 docker 镜像仓库</title>
      <link>http://www.recall704.com/cloud/deploy-docker-registry-with-basic-authentication/</link>
      <pubDate>Sat, 28 Oct 2017 20:46:54 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/deploy-docker-registry-with-basic-authentication/</guid>
      <description>一、创建 auth 目录 创建 auth 目录来存放 用户名和密码
$ mkdir auth  二、生成认证文件 $ docker run \ --entrypoint htpasswd \ registry:2 -Bbn testuser testpassword &amp;gt; auth/htpasswd  生成了一个用户名为 testuser，密码为 testpassword 的认证文件
三、启动镜像仓库 docker run -d \ -p 5000:5000 \ --restart=always \ --name registry \ -v `pwd`/auth:/auth \ -e &amp;quot;REGISTRY_AUTH=htpasswd&amp;quot; \ -e &amp;quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;quot; \ -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \ registry:2  将认证文件挂载到容器中即可。
如果有证书
$ docker run -d \ -p 5000:5000 \ --restart=always \ --name registry \ -v `pwd`/auth:/auth \ -e &amp;quot;REGISTRY_AUTH=htpasswd&amp;quot; \ -e &amp;quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;quot; \ -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \ -v `pwd`/certs:/certs \ -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.</description>
    </item>
    
    <item>
      <title>debian 安装指定版本的 docker</title>
      <link>http://www.recall704.com/ops/install-docker-on-debian/</link>
      <pubDate>Sat, 21 Oct 2017 16:56:20 +0800</pubDate>
      
      <guid>http://www.recall704.com/ops/install-docker-on-debian/</guid>
      <description>1. 加入软件源 cat &amp;gt;&amp;gt; /etc/apt/sources.list &amp;lt;&amp;lt;-EOF deb [arch=amd64] https://apt.dockerproject.org/repo debian-jessie main EOF  不能连接 https 时
apt install apt-transport-https  2. 更新 metadata apt update  3. 列出可选版本 apt-cache policy docker-engine docker-engine: Installed: 1.13.1-0~debian-jessie Candidate: 1.13.1-0~debian-jessie Version table: *** 1.13.1-0~debian-jessie 0 500 https://apt.dockerproject.org/repo/ debian-jessie/main amd64 Packages 100 /var/lib/dpkg/status 1.13.0-0~debian-jessie 0 500 https://apt.dockerproject.org/repo/ debian-jessie/main amd64 Packages 1.12.6-0~debian-jessie 0 500 https://apt.dockerproject.org/repo/ debian-jessie/main amd64 Packages 1.12.5-0~debian-jessie 0 500 https://apt.dockerproject.org/repo/ debian-jessie/main amd64 Packages 1.</description>
    </item>
    
    <item>
      <title>centos 安装指定版本的 docker</title>
      <link>http://www.recall704.com/ops/install-docker-on-centos/</link>
      <pubDate>Sat, 21 Oct 2017 16:56:06 +0800</pubDate>
      
      <guid>http://www.recall704.com/ops/install-docker-on-centos/</guid>
      <description>增加 docker 源
cat &amp;gt;/etc/yum.repos.d/docker.repo &amp;lt;&amp;lt;-EOF [docker-main-repo] name=Docker main Repository baseurl=https://yum.dockerproject.org/repo/main/centos/7 enabled=1 gpgcheck=1 gpgkey=https://yum.dockerproject.org/gpg EOF  yum install epel-release yum makecache  列出所有版本：
# yum list docker-engine --showduplicates | sort -r Loaded plugins: langpacks Installed Packages docker-engine.x86_64 1.9.1-1.el7.centos docker-main-repo docker-engine.x86_64 1.9.0-1.el7.centos docker-main-repo docker-engine.x86_64 1.8.3-1.el7.centos docker-main-repo docker-engine.x86_64 1.8.2-1.el7.centos docker-main-repo docker-engine.x86_64 1.8.1-1.el7.centos docker-main-repo docker-engine.x86_64 1.8.0-1.el7.centos docker-main-repo docker-engine.x86_64 1.7.1-1.el7.centos docker-main-repo docker-engine.x86_64 17.03.0.ce-1.el7.centos docker-main-repo docker-engine.x86_64 1.7.0-1.el7.centos docker-main-repo docker-engine.x86_64 1.13.1-1.el7.centos docker-main-repo docker-engine.x86_64 1.13.1-1.el7.centos @docker-main-repo docker-engine.x86_64 1.</description>
    </item>
    
  </channel>
</rss>