<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cri on RECALL&#39;s Blog</title>
    <link>http://www.recall704.com/tags/cri/</link>
    <description>Recent content in Cri on RECALL&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="http://www.recall704.com/tags/cri/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>k8s 源码分析: kubelet CRI(未完成)</title>
      <link>http://www.recall704.com/cloud/k8s-kubelet-cri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.recall704.com/cloud/k8s-kubelet-cri/</guid>
      <description>一、概述 在学习 k8s 的时候，很容易就看到上面这张图，
然而，我更想了解一下 kubelet 的一些细节知识：
 kubelet 是如何和 docker 进行通信的 CRI 是如何定义和实现的  二、GRPC grpc 的接口定义是在后缀为 .proto 的文件中
在 k8s 的源码中搜索 rpc 并指定文件类型为 proto，可以很快搜索到相关的定义，具体文件在
k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime/api.proto
其中，我比较关注下面几个接口
 rpc CreateContainer(CreateContainerRequest) returns (CreateContainerResponse) {} rpc StartContainer(StartContainerRequest) returns (StartContainerResponse) {} rpc StopContainer(StopContainerRequest) returns (StopContainerResponse) {}  到此，我找到了 CRI 接口的定义，那么，它的具体实现在哪里呢？
我尝试了全局搜索，由于数据量太多，暂时放弃了。
三、kubelet 中 CRI Runtime 的配置 if containerRuntime != kubetypes.RktContainerRuntime { ... switch containerRuntime { case kubetypes.DockerContainerRuntime: // Create and start the CRI shim running as a grpc server.</description>
    </item>
    
  </channel>
</rss>