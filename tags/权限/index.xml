<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>权限 on RECALL&#39;s Blog</title>
    <link>http://www.recall704.com/tags/%E6%9D%83%E9%99%90/</link>
    <description>Recent content in 权限 on RECALL&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 21 Oct 2017 14:39:44 +0800</lastBuildDate>
    
	<atom:link href="http://www.recall704.com/tags/%E6%9D%83%E9%99%90/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>权限、RBAC 和 ObjectPermission</title>
      <link>http://www.recall704.com/developer/permission-rbac-and-objectpermission/</link>
      <pubDate>Sat, 21 Oct 2017 14:39:44 +0800</pubDate>
      
      <guid>http://www.recall704.com/developer/permission-rbac-and-objectpermission/</guid>
      <description>一. 从简单权限控制到 RBAC 1. 只有一个权限 在系统初期，我们的用户是这样的
{:class=&amp;ldquo;img-responsive&amp;rdquo;}
系统只有两类用户，管理员和普通用户，判断用户权限的时候，代码如下
def func(): user = User.objects.get(id=1) if user.is_admin: do_someting() else: pass  2. 少量权限 再后来，我们的系统需要三个权限，发布文章，修改文章，删除文章。
我们的数据库变成了这样
   id 用户名 密码 是否允许发布文章 是否允许修改文章 是否允许删除文章     1 test1 123123 True False False   2 test2 123123 False True False   3 test3 123123 False False True    同样的，我们的代码也会多一些判断
def func(): user = User.objects.get(id=1) if user.is_add_allowed: do_something1() if user.</description>
    </item>
    
  </channel>
</rss>