<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RECALL&#39;s Blog</title>
    <link>http://www.recall704.com/</link>
    <description>Recent content on RECALL&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 11 Mar 2018 21:54:53 +0800</lastBuildDate>
    
	<atom:link href="http://www.recall704.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>k8s 中的污染 Taint 与容忍 Toleration</title>
      <link>http://www.recall704.com/cloud/taint-and-toleration/</link>
      <pubDate>Sun, 11 Mar 2018 21:54:53 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/taint-and-toleration/</guid>
      <description>之前的内部分享中我提到过，pod 最终会被调度到某个具体的 node 上运行。那么有没有某种方式，限制 pod，不让它在某些 node 上运行呢？ 或者说，只允许某些 pod 在某些 node 上运行呢？  taint 和 toleration 了解一下。
 一、 taint （污染） 首先一点，taint 是针对 node 而言的，给 node 增加 taint 的命令如下
kubectl taint nodes node1 aaa=bbb:NoSchedule  其中：
1. aaa 代表 taint 的 key
2. bbb 代表 taint 的 value
3. NoSchedule 代码这个 taint 对应的影响，它可以有三个值
   值 含义     NoSchedule 不允许新的 pod 调度到该 node 上，除非 toleration 条件满足；不影响已经运行在该 node 上的 pod   PreferNoSchedule 尽可能不要调度到该 node 上，除非 toleration 条件满足；不影响已经运行在该 node 上的 pod   NoExecute 驱逐该节点上的 pod 到其它节点，除了 toleration 条件满足的 pod；影响已经运行在该 node 上的所有 pod    我们了解到一点，那就是增加了 taint 的 node，pod 就不会调度到它上面运行了。</description>
    </item>
    
    <item>
      <title>Fix Alpine Update Failed</title>
      <link>http://www.recall704.com/cloud/fix-alpine-update-failed/</link>
      <pubDate>Thu, 18 Jan 2018 17:54:53 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/fix-alpine-update-failed/</guid>
      <description>之前为了统一一个 golang 的编译环境，做了一个对应的镜像， Dockerfile 如下
FROM golang:1.8.5-alpine3.6 MAINTAINER @recall704 https://github.com/recall704 RUN apk update &amp;amp;&amp;amp; \ apk add gcc linux-headers musl-dev &amp;amp;&amp;amp; \ rm -rf /var/cache/* &amp;amp;&amp;amp; \ echo &amp;quot;https://mirrors.ustc.edu.cn/alpine/v3.6/main/&amp;quot; &amp;gt; /etc/apk/repositories &amp;amp;&amp;amp; \ echo &amp;quot;https://mirrors.ustc.edu.cn/alpine/v3.6/community/&amp;quot; &amp;gt;&amp;gt; /etc/apk/repositories  正常跑着没问题，但是
docker run --rm -it win7/golang:v1.8.5-gcc sh  进入容器后，我想更新一个 go 的 package，发现没有 git，很自然的想到 apk update apk add git  但是
/go # apk update fetch https://mirrors.ustc.edu.cn/alpine/v3.6/main/x86_64/APKINDEX.tar.gz ERROR: https://mirrors.ustc.edu.cn/alpine/v3.6/main/: Bad file descriptor WARNING: Ignoring APKINDEX.</description>
    </item>
    
    <item>
      <title>Deploy K8s With Kubeadm</title>
      <link>http://www.recall704.com/cloud/deploy-k8s-with-kubeadm/</link>
      <pubDate>Sun, 07 Jan 2018 20:32:40 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/deploy-k8s-with-kubeadm/</guid>
      <description>一、环境准备 两台 centos 7.2 mini 系统，virtualbox 安装的系统，桥接模式，能正常访问网络
node1： 192.168.88.50
node2： 192.168.88.51
二、环境预处理在两台机器上都执行下面的命令 1. 关闭防火墙 systemctl stop firewalld  2. sysctl 配置 cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sysctl --system  3. 时间同步 yum install -y ntpdate ntpdate cn.ntp.org.cn  4. 启用 epel yum install -y epel-release  5. 禁用虚拟内存 swapoff -a  6. 设置 hostname node1 上执行
hostnamectl set-hostname node1  node2 上执行
hostnamectl set-hostname node2  三、安装 docker yum install -y docker systemctl enable docker &amp;amp;&amp;amp; systemctl start docker  四、安装 kubeadm, kubelet and kubectl cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.</description>
    </item>
    
    <item>
      <title>Clair 源码简要分析（未完待续）</title>
      <link>http://www.recall704.com/cloud/clair/</link>
      <pubDate>Wed, 20 Dec 2017 20:24:42 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/clair/</guid>
      <description>概述 clair 是 coreos 发布的一款开源容器漏洞扫描工具，该工具可以交叉检查Docker镜像的操作系统以及上面安装的任何包是否与任何已知不安全的包版本相匹配。
在开始分析 clair 之前，我们明白几点：
1. clair 是以静态分析的方式对镜像进行分析的，有点类似于杀毒软件用特征码来扫描病毒。
2. clair 镜像分析是按镜像层级来进行的，如果某一层的软件有漏洞，在上层被删除了，该漏洞还是存在的。
3. clair 的漏洞扫描是通过软件版本比对来完成的，如果某个应用，比如 nginx ，它在镜像中的版本为 1.0.0，而该版本在数据库中存在 1.0.0 对应的漏洞数据，则表示该镜像存在对应的漏洞。
clair 中的几个概念 1. Namespace 这里的 namespace 既不是租户也不是命名空间，而是系统或软件的名称。
比如 debian，NodeJS。
2. Feature 在镜像层中检测到的软件包，但是没有检测到 namespace。
比如： Name: OpenSSL, Version: 1.0, VersionFormat: dpkg
3. NamespacedFeature 和 Feature 类似，同时检测到了 namespace。
比如： OpenSSL 1.0 dpkg Debian:7
4. Vulnerability Vulnerability 是应用对应的漏洞描述。
代码分析 我们直接从镜像扫描开始分析代码
代码在 github.com/coreos/clair/worker.go 中
func processLayers(datastore database.Datastore, imageFormat string, requests []LayerRequest) ([]database.</description>
    </item>
    
    <item>
      <title>harbor 源码分析： job</title>
      <link>http://www.recall704.com/cloud/harbor-job.md/</link>
      <pubDate>Tue, 19 Dec 2017 18:45:17 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/harbor-job.md/</guid>
      <description>概述 harbor 中有两个常用的功能，镜像复制和镜像扫描，而这两个操作都是比较耗时的任务，在 harbor 中，被设计为 job 来完成。
接口定义 同样的，我们先来看 Job 的接口定义
代码在 github.com/vmware/harbor/src/jobservice/job/jobs.go
type Job interface { // job 的 id，通过 id 可以查看对应的信息 ID() int64 // job 类型，目前只有 Scan 和 Replication 两种 Type() Type // 日志所在路径，通过这个路径可以查看 job 的状态 LogPath() string // 更新 job 状态 UpdateStatus(status string) error // 初始化一个 job Init() error }  镜像扫描 1. 镜像扫描任务的基本结构 代码在 github.com/vmware/harbor/src/jobservice/job/jobs.go
type ScanJob struct { id int64 parm *ScanJobParm } type ScanJobParm struct { Repository string Tag string // 镜像 哈希值 Digest string }  镜像扫描需要的参数很少，其实就是镜像的地址，附带一个镜像哈希值。</description>
    </item>
    
    <item>
      <title>harbor 源码分析： 用户认证</title>
      <link>http://www.recall704.com/cloud/harbor-authenticate.md/</link>
      <pubDate>Wed, 22 Nov 2017 11:14:50 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/harbor-authenticate.md/</guid>
      <description>接口定义 代码在 src/ui/auth/authenticator.go
// Authenticator provides interface to authenticate user credentials. type Authenticator interface { // Authenticate ... Authenticate(m models.AuthModel) (*models.User, error) }  接口中定义了函数 Authenticate，只要对应的结构体实现了该函数，就能完成认证。
我们通过其中的数据库认证方式，来简单分析。
接口实现 代码在 src/ui/auth/db/db.go
// Auth implements Authenticator interface to authenticate user against DB. type Auth struct{} // Authenticate calls dao to authenticate user. func (d *Auth) Authenticate(m models.AuthModel) (*models.User, error) { u, err := dao.LoginByDb(m) if err != nil { return nil, err } return u, nil }  接口的注册 代码在 src/ui/auth/db/db.</description>
    </item>
    
    <item>
      <title>ansible template 基本用法</title>
      <link>http://www.recall704.com/ansible/ansible-template-demo/</link>
      <pubDate>Fri, 03 Nov 2017 11:08:09 +0800</pubDate>
      
      <guid>http://www.recall704.com/ansible/ansible-template-demo/</guid>
      <description>- name: config docker service template: src: docker.service.j2 dest: /etc/systemd/system/docker.service mode: 0644 tags: - docker  会将当前模板下的 docker.service.j2 生成 /etc/systemd/system/docker.service 到对应的主机下
[Unit] Description=Docker Application Container Engine Documentation=https://docs.docker.com After=network-online.target firewalld.service Wants=network-online.target [Service] Type=notify # the default is not to use systemd for cgroups because the delegate issues still # exists and systemd currently does not support the cgroup feature set required # for containers run by docker ExecStart=/usr/bin/dockerd ExecReload=/bin/kill -s HUP $MAINPID # Having non-zero Limit*s causes performance problems due to accounting overhead # in the kernel.</description>
    </item>
    
    <item>
      <title>部署一个带有基础认证的 docker 镜像仓库</title>
      <link>http://www.recall704.com/cloud/deploy-docker-registry-with-basic-authentication/</link>
      <pubDate>Sat, 28 Oct 2017 20:46:54 +0800</pubDate>
      
      <guid>http://www.recall704.com/cloud/deploy-docker-registry-with-basic-authentication/</guid>
      <description>一、创建 auth 目录 创建 auth 目录来存放 用户名和密码
$ mkdir auth  二、生成认证文件 $ docker run \ --entrypoint htpasswd \ registry:2 -Bbn testuser testpassword &amp;gt; auth/htpasswd  生成了一个用户名为 testuser，密码为 testpassword 的认证文件
三、启动镜像仓库 docker run -d \ -p 5000:5000 \ --restart=always \ --name registry \ -v `pwd`/auth:/auth \ -e &amp;quot;REGISTRY_AUTH=htpasswd&amp;quot; \ -e &amp;quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;quot; \ -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \ registry:2  将认证文件挂载到容器中即可。
如果有证书
$ docker run -d \ -p 5000:5000 \ --restart=always \ --name registry \ -v `pwd`/auth:/auth \ -e &amp;quot;REGISTRY_AUTH=htpasswd&amp;quot; \ -e &amp;quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;quot; \ -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \ -v `pwd`/certs:/certs \ -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.</description>
    </item>
    
    <item>
      <title>Add epel for centos</title>
      <link>http://www.recall704.com/raspberry/add-epel-for-centos/</link>
      <pubDate>Sat, 21 Oct 2017 17:01:53 +0800</pubDate>
      
      <guid>http://www.recall704.com/raspberry/add-epel-for-centos/</guid>
      <description>cat &amp;gt; /etc/yum.repos.d/epel.repo &amp;lt;&amp;lt; EOF [epel] name=Epel rebuild for armhfp baseurl=https://armv7.dev.centos.org/repodir/epel-pass-1/ enabled=1 gpgcheck=0 EOF  </description>
    </item>
    
    <item>
      <title>debian 安装指定版本的 docker</title>
      <link>http://www.recall704.com/ops/install-docker-on-debian/</link>
      <pubDate>Sat, 21 Oct 2017 16:56:20 +0800</pubDate>
      
      <guid>http://www.recall704.com/ops/install-docker-on-debian/</guid>
      <description>1. 加入软件源 cat &amp;gt;&amp;gt; /etc/apt/sources.list &amp;lt;&amp;lt;-EOF deb [arch=amd64] https://apt.dockerproject.org/repo debian-jessie main EOF  不能连接 https 时
apt install apt-transport-https  2. 更新 metadata apt update  3. 列出可选版本 apt-cache policy docker-engine docker-engine: Installed: 1.13.1-0~debian-jessie Candidate: 1.13.1-0~debian-jessie Version table: *** 1.13.1-0~debian-jessie 0 500 https://apt.dockerproject.org/repo/ debian-jessie/main amd64 Packages 100 /var/lib/dpkg/status 1.13.0-0~debian-jessie 0 500 https://apt.dockerproject.org/repo/ debian-jessie/main amd64 Packages 1.12.6-0~debian-jessie 0 500 https://apt.dockerproject.org/repo/ debian-jessie/main amd64 Packages 1.12.5-0~debian-jessie 0 500 https://apt.dockerproject.org/repo/ debian-jessie/main amd64 Packages 1.</description>
    </item>
    
    <item>
      <title>centos 安装指定版本的 docker</title>
      <link>http://www.recall704.com/ops/install-docker-on-centos/</link>
      <pubDate>Sat, 21 Oct 2017 16:56:06 +0800</pubDate>
      
      <guid>http://www.recall704.com/ops/install-docker-on-centos/</guid>
      <description>增加 docker 源
cat &amp;gt;/etc/yum.repos.d/docker.repo &amp;lt;&amp;lt;-EOF [docker-main-repo] name=Docker main Repository baseurl=https://yum.dockerproject.org/repo/main/centos/7 enabled=1 gpgcheck=1 gpgkey=https://yum.dockerproject.org/gpg EOF  yum install epel-release yum makecache  列出所有版本：
# yum list docker-engine --showduplicates | sort -r Loaded plugins: langpacks Installed Packages docker-engine.x86_64 1.9.1-1.el7.centos docker-main-repo docker-engine.x86_64 1.9.0-1.el7.centos docker-main-repo docker-engine.x86_64 1.8.3-1.el7.centos docker-main-repo docker-engine.x86_64 1.8.2-1.el7.centos docker-main-repo docker-engine.x86_64 1.8.1-1.el7.centos docker-main-repo docker-engine.x86_64 1.8.0-1.el7.centos docker-main-repo docker-engine.x86_64 1.7.1-1.el7.centos docker-main-repo docker-engine.x86_64 17.03.0.ce-1.el7.centos docker-main-repo docker-engine.x86_64 1.7.0-1.el7.centos docker-main-repo docker-engine.x86_64 1.13.1-1.el7.centos docker-main-repo docker-engine.x86_64 1.13.1-1.el7.centos @docker-main-repo docker-engine.x86_64 1.</description>
    </item>
    
    <item>
      <title>权限、RBAC 和 ObjectPermission</title>
      <link>http://www.recall704.com/developer/permission-rbac-and-objectpermission/</link>
      <pubDate>Sat, 21 Oct 2017 14:39:44 +0800</pubDate>
      
      <guid>http://www.recall704.com/developer/permission-rbac-and-objectpermission/</guid>
      <description>一. 从简单权限控制到 RBAC 1. 只有一个权限 在系统初期，我们的用户是这样的
   id 用户名 密码 是否管理员     1 admin 123456 True   2 test1 123123 False   3 test2 123123 False    系统只有两类用户，管理员和普通用户，判断用户权限的时候，代码如下
def func(): user = User.objects.get(id=1) if user.is_admin: do_someting() else: pass  2. 少量权限 再后来，我们的系统需要三个权限，发布文章，修改文章，删除文章。
我们的数据库变成了这样
   id 用户名 密码 是否允许发布文章 是否允许修改文章 是否允许删除文章     1 test1 123123 True False False   2 test2 123123 False True False   3 test3 123123 False False True    同样的，我们的代码也会多一些判断</description>
    </item>
    
    <item>
      <title>初恋</title>
      <link>http://www.recall704.com/about/</link>
      <pubDate>Sat, 21 Oct 2017 14:08:35 +0800</pubDate>
      
      <guid>http://www.recall704.com/about/</guid>
      <description>你让我站也不是
你让我坐也不是
你说着感兴趣的
你笑时，我的眼神
在你的远处闪烁
就像不需要风的时候
树无奈地因为风儿走进了骚动
也好像在奢望着明月时
月儿滑入了没有生气的梦境
做一个万端信息的接收器
你的呼吸乃至思维使我波动
你告诉我的话号我不想拨打
我担心一开口就变了意思
宛如没有什么存在一样
你把长凳坐出你特有的体香
不曾接到你的一点暗示
我的视点，始终游离于你的
鬓发和你的双肩
街这边街那边是咫尺又是天涯
长凳空出来了，但人的思念塞满了
你那欢悦的笑语和快乐的肢体
是要告诉我，我要分享你的幸福么
在梦里我不敢握你的手
就像卑微的人不敢面对偶像的高贵和神圣
你是翻飞在九霄的精灵
激动着我把你洒落的羽毛举向阳光</description>
    </item>
    
  </channel>
</rss>